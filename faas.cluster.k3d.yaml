##
# overrides for the k3d command line can be stored in files like this
# see also: https://k3d.io/v5.6.0/usage/configfile/
##

# NB: must be compatible with the k3d version in k8s-tools.yaml
apiVersion: k3d.io/v1alpha5 

kind: Simple 
metadata:
  # cluster name (will still be prefixed with `k3d-`)
  name: faas

# FIXME: this is the max for this version of k3d?  
# downgrading it's possible to increase the count 
# to ~15, but this requires lower `apiVersion`,
# and then the `registries` feature is lost.
servers: 3
agents: 7 

# https://k3d.io/v5.6.0/usage/registries/#creating-a-registry-proxy-pull-through-registry-via-configfile
# registries:
#   create:
#     name: docker-io # name of the registry container
#     proxy:
#       remoteURL: https://registry-1.docker.io # proxy DockerHub
#     volumes:
#       - /tmp/reg:/var/lib/registry # persist data locally in /tmp/reg
#   config: | # tell K3s to use this registry when pulling from DockerHub
#     mirrors:
#       "docker.io":
#         endpoint:
#           - http://docker-io:5000

# same as `--api-port myhost.my.domain:6445` (where the name would resolve to 127.0.0.1)
#   host: "myhost.my.domain" # important for the `server` setting in the kubeconfig
#   hostIP: "127.0.0.1" # where the Kubernetes API will be listening on
  # where the Kubernetes API listening port will be mapped to on your host system
kubeAPI: 
  hostPort: "6551" 

# image: rancher/k3s:v1.20.4-k3s1 # same as `--image rancher/k3s:v1.20.4-k3s1`
# network: my-custom-net # same as `--network my-custom-net`
# subnet: "172.28.0.0/16" # same as `--subnet 172.28.0.0/16`
# token: superSecretToken # same as `--token superSecretToken`

# volumes: # repeatable flags are represented as YAML lists
#   - volume: /my/host/path:/path/in/node # same as `--volume '/my/host/path:/path/in/node@server:0;agent:*'`
#     nodeFilters:
#       - server:0
#       - agent:*
# same as `--port '8080:80@loadbalancer'`
ports:
  - port: 8080:80 
    nodeFilters:
      - loadbalancer
# env:
#   - envVar: bar=baz # same as `--env 'bar=baz@server:0'`
#     nodeFilters:
#       - server:0
# hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
#   - ip: 1.2.3.4
#     hostnames: 
#       - my.host.local
#       - that.other.local
#   - ip: 1.1.1.1
#     hostnames:
#       - cloud.flare.dns
 # k3d runtime settings
  # wait for cluster to be usable before returning; same as `--wait` options:
# options:
#   k3d:
#     wait: true(default: true)
#     timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
#     disableLoadbalancer: false # same as `--no-lb`
#     disableImageVolume: false # same as `--no-image-volume`
#     disableRollback: false # same as `--no-Rollback`
#     loadbalancer:
#       configOverrides:
#         - settings.workerConnections=2048
#   k3s: # options passed on to K3s itself
#     extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
#       - arg: "--tls-san=my.host.domain"
#         nodeFilters:
#           - server:*
#     nodeLabels:
#       - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
#         nodeFilters:
#           - agent:1
#   kubeconfig:
#     updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
#     switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
#   runtime: # runtime (docker) specific options
#     gpuRequest: all # same as `--gpus all`
#     labels:
#       - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
#         nodeFilters:
#           - agent:1
#     ulimits:
#       - name: nofile
#         soft: 26677
#         hard: 26677